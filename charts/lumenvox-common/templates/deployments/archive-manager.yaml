apiVersion: apps/v1
kind: Deployment
metadata:
  name: archive
  namespace: {{ default .Release.Namespace .Values.global.defaultNamespace }}
  labels:
    app: archive
spec:
  replicas: 1
  selector:
    matchLabels:
      app: archive
  template:
    metadata:
      labels:
        app: archive
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '5110'
        {{- if .Values.global.linkerd.enabled }}
        linkerd.io/inject: enabled
        {{- end }}
    spec:
      containers:
        - name: archive
          image: {{ .Values.image.repository | default .Values.global.image.repository }}/archive{{ .Values.image.tag | default .Values.global.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy | default .Values.global.image.pullPolicy }}
{{/*          ports:*/}}
{{/*            - name: portal*/}}
{{/*              containerPort: 3001*/}}
{{/*          readinessProbe:*/}}
{{/*            httpGet:*/}}
{{/*              path: /health*/}}
{{/*              port: 5110*/}}
{{/*            initialDelaySeconds: {{ .Values.global.lumenvox.service.startDelaySeconds }}*/}}
{{/*            periodSeconds: {{ .Values.global.lumenvox.probes.periodSeconds }}*/}}
          resources:
            requests:
              cpu: 5m
              memory: 30Mi
            {{- if .Values.global.lumenvox.enforceLimits }}
            limits:
              cpu: 100m
              memory: 50Mi
            {{- end }}
          envFrom:
            - configMapRef:
                name: timezone-configmap
            {{- if .Values.rabbitmq.auth.existingPasswordSecret }}
            - secretRef:
                name: {{ .Values.rabbitmq.auth.existingPasswordSecret }}
            {{- end }}
            {{- if .Values.postgresql.existingSecret }}
            - secretRef:
                name: {{ .Values.postgresql.existingSecret }}
            {{- end }}
          env:
            {{- if not .Values.rabbitmq.auth.existingPasswordSecret }}
            - name: rabbitmq-password
              value: '{{ .Values.rabbitmq.auth.password }}'
            {{- end }}
            {{- if not .Values.postgresql.existingSecret }}
            - name: postgresql-password
              value: "{{ .Values.postgresql.password }}"
            {{- end }}
            - name: GLOBAL_SETTINGS__RABBITMQ_CONNECTION_STRING
              value: 'amqp{{ if .Values.global.rabbitmq.enableTLS }}s{{ end }}://{{ .Values.global.rabbitmq.connection.user }}:$(rabbitmq-password)@{{ .Values.global.rabbitmq.connection.url }}:{{ .Values.global.rabbitmq.connection.port }}'
            - name: SERVICE_ADDRESSES__CONFIGURATION_SERVICE
              value: 'http://configuration-service.{{ default .Release.Namespace .Values.global.defaultNamespace }}'
            - name: SERVICE_ADDRESSES__DEPLOYMENT_SERVICE
              value: 'http://deployment-service.{{ default .Release.Namespace .Values.global.defaultNamespace }}'
            - name: SESSION_SETTINGS__API_EXCHANGE
              value: 'BroadcastExchange'
            - name: LOCAL_SETTINGS__ENV
              value: 'dev'
            - name: GOLANG_PROTOBUF_REGISTRATION_CONFLICT
              value: 'ignore'
            - name: DB_SETTINGS__ARCHIVE_POSTGRES_CONNECTION_STRING
              value: 'postgres://{{ .Values.global.postgresql.connection.user }}:$(postgresql-password)@{{ .Values.global.postgresql.connection.url }}:{{ .Values.global.postgresql.connection.port }}/archive_db?sslmode=disable'
      {{- if .Values.global.imagePullSecrets }}
      imagePullSecrets:
      {{- range .Values.global.imagePullSecrets }}
        - name: {{ . }}
      {{- end }}
      {{- end }}
      initContainers:
        - name: wait-for-deployment-service
          image: {{ .Values.image.repository | default .Values.global.image.repository }}/cloud-init-tools{{ .Values.image.tag | default .Values.global.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy | default .Values.global.image.pullPolicy }}
          command: ["curl2"]
          args: ["http://deployment-service.{{ default .Release.Namespace .Values.global.defaultNamespace }}:90/health", "Deployment Service"]
        {{- if .Values.rabbitmq.enabled }}
        - name: wait-for-rabbitmq-service
          image: {{ .Values.image.repository | default .Values.global.image.repository }}/cloud-init-tools{{ .Values.image.tag | default .Values.global.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy | default .Values.global.image.pullPolicy }}
          command: ["nslookup2"]
          args: ["{{ .Values.global.rabbitmq.connection.url }}", "RabbitMQ Service"]
        {{- end }}
        {{- if .Values.rabbitmq.init.checkManagementEndpoint }}
        - name: wait-for-rabbitmq-management-endpoint
          image: {{ .Values.image.repository | default .Values.global.image.repository }}/cloud-init-tools{{ .Values.image.tag | default .Values.global.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy | default .Values.global.image.pullPolicy }}
          command: ["curl2"]
          args: ["http{{ if .Values.global.rabbitmq.enableTLS }}s{{ end }}://{{ .Values.global.rabbitmq.connection.url }}{{ if not .Values.global.rabbitmq.enableTLS }}:15672{{ end }}", "RabbitMQ Management Page"]
        {{- end }}
