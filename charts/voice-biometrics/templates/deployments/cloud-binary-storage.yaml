apiVersion: apps/v1
kind: Deployment
metadata:
  name: binarystorage
  namespace: {{ default .Release.Namespace .Values.defaultNamespace }}
  labels:
    app: binarystorage
spec:
  replicas: 1
  selector:
    matchLabels:
      app: binarystorage
  template:
    metadata:
      labels:
        app: binarystorage
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '90'
        {{- if .Values.linkerd.enabled }}
        {{- if eq .Values.linkerd.ingressMode "nginx" }}
        linkerd.io/inject: enabled
        {{- else }}
        # Use traefik mode
        linkerd.io/inject: ingress
        {{- end }}
        {{- end }}
    spec:
      containers:
        - name: binarystorage
          image: {{ .Values.image.repository }}/cloud-binary-storage{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: metrics
              containerPort: 90
            - name: grpc
              containerPort: 80
          readinessProbe:
            httpGet:
              path: /health
              port: 90
            initialDelaySeconds: {{ .Values.lumenvox.service.startDelaySeconds }}
            periodSeconds: {{ .Values.probes.periodSeconds }}
          {{- if .Values.lumenvox.service.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: /health
              port: 90
            initialDelaySeconds: {{ .Values.lumenvox.service.startDelaySeconds }}
            periodSeconds: {{ .Values.probes.periodSeconds }}
          {{- end }}
          resources:
            requests:
              cpu: 100m
              memory: 200Mi
            limits:
              cpu: 550m
              memory: 650Mi
          envFrom:
            - configMapRef:
                name: lumenvox-configmap
{{/*          env:*/}}
{{/*            - name: MockDataSettings__DeploymentsJson*/}}
{{/*              valueFrom:*/}}
{{/*                configMapKeyRef:*/}}
{{/*                  name: lumenvox-configmap*/}}
{{/*                  key: MockDataSettings__DeploymentsJson*/}}
{{/*            - name: MockDataSettings__MasterKeysJson*/}}
{{/*              valueFrom:*/}}
{{/*                configMapKeyRef:*/}}
{{/*                  name: lumenvox-configmap*/}}
{{/*                  key: MockDataSettings__MasterKeysJson*/}}
{{/*            - name: MockDataSettings__CustomerKeysJson*/}}
{{/*              valueFrom:*/}}
{{/*                configMapKeyRef:*/}}
{{/*                  name: lumenvox-configmap*/}}
{{/*                  key: MockDataSettings__CustomerKeysJson*/}}

      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
      {{- range .Values.imagePullSecrets }}
        - name: {{ . }}
      {{- end}}
      {{- end }}
      initContainers:
        - name: wait-for-deployment-service
          image: curlimages/curl:latest
          command: ["/bin/sh","-c"]
          args: ["while [ $(curl -sw '%{http_code}' http://deployment-service.{{ default .Release.Namespace .Values.defaultNamespace }}:90/health -o /dev/null) -ne 200 ]; do sleep 2; echo 'Waiting for the Deployment Service...'; done"]
