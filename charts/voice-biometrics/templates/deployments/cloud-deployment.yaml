apiVersion: apps/v1
kind: Deployment
metadata:
  name: deployment
  namespace: {{ default .Release.Namespace .Values.defaultNamespace }}
  labels:
    app: deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: deployment
  template:
    metadata:
      labels:
        app: deployment
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '90'
        {{- if .Values.linkerd.enabled }}
        {{- if eq .Values.linkerd.ingressMode "nginx" }}
        linkerd.io/inject: enabled
        {{- else }}
        # Use traefik mode
        linkerd.io/inject: ingress
        {{- end }}
        {{- end }}
    spec:
      # Assign this pod a higher priority than others, since others depend on this one to be running first
      priorityClassName: high-priority
      containers:
        - name: deployment
          image: {{ .Values.image.repository }}/cloud-deployment{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: metrics
              containerPort: 90
            - name: grpc
              containerPort: 80
          readinessProbe:
            httpGet:
              path: /health
              port: 90
            initialDelaySeconds: {{ .Values.lumenvox.deploymentStartDelaySeconds }}
            periodSeconds: {{ .Values.probes.periodSeconds }}
          {{- if .Values.lumenvox.service.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: /health
              port: 90
            initialDelaySeconds: {{ .Values.lumenvox.deploymentStartDelaySeconds }}
            periodSeconds: {{ .Values.probes.periodSeconds }}
          {{- end }}
{{/*          startupProbe:*/}}
{{/*            httpGet:*/}}
{{/*              path: /health*/}}
{{/*              port: 90*/}}
{{/*            # 8 * 5 = 40 seconds of initial startup time allowed*/}}
{{/*            failureThreshold: 8*/}}
{{/*            periodSeconds: {{ .Values.probes.periodSeconds }}*/}}
          resources:
            requests:
              cpu: 100m
              memory: 350Mi
            {{- if .Values.lumenvox.enforceLimits }}
            limits:
              cpu: 250m
              memory: 550Mi
            {{- end }}
          envFrom:
            - configMapRef:
                name: lumenvox-configmap
          env:
            - name: SERVICE_START_DELAY_SECONDS
              value: '{{ .Values.lumenvox.deploymentStartDelaySeconds }}'
{{/*            - name: ConnectionStrings__PostgresConnection*/}}
{{/*              valueFrom:*/}}
{{/*                configMapKeyRef:*/}}
{{/*                  name: lumenvox-configmap*/}}
{{/*                  key: ConnectionStrings__PostgresConnection*/}}
{{/*            - name: MOCK_TEST_DATA*/}}
{{/*              valueFrom:*/}}
{{/*                configMapKeyRef:*/}}
{{/*                  name: lumenvox-configmap*/}}
{{/*                  key: MOCK_TEST_DATA*/}}
{{/*            - name: POSTGRES_USER*/}}
{{/*              valueFrom:*/}}
{{/*                configMapKeyRef:*/}}
{{/*                  name: lumenvox-configmap*/}}
{{/*                  key: DB_USER_COMMON*/}}
{{/*            - name: POSTGRES_DB*/}}
{{/*              valueFrom:*/}}
{{/*                configMapKeyRef:*/}}
{{/*                  name: lumenvox-configmap*/}}
{{/*                  key: POSTGRES_DB*/}}
{{/*            - name: MockDataSettings__DeploymentsJson*/}}
{{/*              valueFrom:*/}}
{{/*                configMapKeyRef:*/}}
{{/*                  name: lumenvox-configmap*/}}
{{/*                  key: MockDataSettings__DeploymentsJson*/}}
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
      {{- range .Values.imagePullSecrets }}
        - name: {{ . }}
      {{- end}}
      {{- end }}
      initContainers:
        - name: init-postgres
          image: busybox:1.28
          command: ['sh', '-c', "until nslookup {{ .Values.postgresql.connection.url }}; do echo waiting for Postgres; sleep 2; done"]
        - name: init-mongodb
          image: busybox:1.28
          command: ['sh', '-c', "until nslookup {{ .Values.mongodb.connection.url }}; do echo waiting for MongoDB; sleep 2; done"]
        - name: init-redis
          image: busybox:1.28
          command: ['sh', '-c', "until nslookup {{ .Values.redis.connection.url }}; do echo waiting for Redis; sleep 2; done"]
