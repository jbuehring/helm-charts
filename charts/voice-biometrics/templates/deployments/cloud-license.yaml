apiVersion: apps/v1
kind: Deployment
metadata:
  name: license
  namespace: {{ default .Release.Namespace .Values.defaultNamespace }}
  labels:
    app: license
spec:
  replicas: 1
  selector:
    matchLabels:
      app: license
  template:
    metadata:
      labels:
        app: license
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '5110'
    spec:
      containers:
        - name: license
          image: {{ .Values.image.repository }}/cloud-license{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: metrics
              containerPort: 5110
            - name: grpc
              containerPort: 5010
          readinessProbe:
            httpGet:
              path: /health
              port: 5110
            initialDelaySeconds: {{ .Values.lumenvox.service.startDelaySeconds }}
            periodSeconds: {{ .Values.probes.periodSeconds }}
          {{- if .Values.lumenvox.service.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: /health
              port: 5110
            initialDelaySeconds: {{ .Values.lumenvox.service.startDelaySeconds }}
            periodSeconds: {{ .Values.probes.periodSeconds }}
          {{- end }}
{{/*          startupProbe:*/}}
{{/*            httpGet:*/}}
{{/*              path: /health*/}}
{{/*              port: 5110*/}}
{{/*            # 6 * 5 = 30 seconds of initial startup time allowed*/}}
{{/*            failureThreshold: 6*/}}
{{/*            periodSeconds: {{ .Values.probes.periodSeconds }}*/}}
          resources:
            requests:
              cpu: 5m
              memory: 15Mi
            limits:
              cpu: 100m
              memory: 50Mi
          env:
            - name: DEPLOYMENT_DB_CONNECTION
              valueFrom:
                configMapKeyRef:
                  name: lumenvox-configmap
                  key: ConnectionStrings__PostgresConnection
            {{ if .Values.licensing.showDebugOutput }}
            - name: SHOW_DEBUG_OUTPUT
              value: '{{ .Values.licensing.showDebugOutput }}'
            {{- end }}
            - name: LICENSE_CLUSTER_GUID
              value: '{{ .Values.licensing.clusterGuid }}'
            {{- if .Values.licensing.databaseHostOverride }}
            - name: DB_HOST_OVERRIDE
              value: '{{ .Values.licensing.databaseHostOverride }}'
            {{- end }}
            {{- if .Values.licensing.reportEndpoint }}
            - name: LICENSE_REPORT_ENDPOINT
              value: '{{ .Values.licensing.reportEndpoint }}'
            {{- end }}
            - name: LICENSE_REPORT_FREQUENCY_MINS
              value: '{{ .Values.licensing.reportFreqMins }}'
            - name: LICENSE_REPORT_SYNC_HOUR
              value: '{{ .Values.licensing.reportSyncHour }}'
            - name: LICENSE_REPORT_SYNC_MIN
              value: '{{ .Values.licensing.reportSyncMin }}'
            - name: VERBOSE_DB_LOGGING
              value: '{{ .Values.licensing.verboseDbLogging }}'
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
      {{- range .Values.imagePullSecrets }}
        - name: {{ . }}
      {{- end}}
      {{- end }}
      initContainers:
        - name: wait-for-deployment-service
          image: busybox:1.28
          command: ['sh', '-c', "until nslookup deployment-service.{{ default .Release.Namespace .Values.defaultNamespace }}; do echo waiting for Deployment Service; sleep 2; done"]
